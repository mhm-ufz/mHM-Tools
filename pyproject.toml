[build-system]
requires = [
    "hatchling>=1.8.0",
    "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.8"
name = "mhm_tools"
description = "Tools for mHM."
authors = [{name = "mHM Developers", email = "mhm-admin@ufz.de"}]
readme = "README.md"
license = "LGPL-3.0"
dynamic = ["version"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
  "Natural Language :: English",
  "Operating System :: Unix",
  "Operating System :: Microsoft",
  "Operating System :: MacOS",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development",
  "Topic :: Utilities",
]
dependencies = [
  "numpy>=1.17.3",
  "netCDF4",
  "xarray",
]

[project.urls]
Homepage = "https://mhm-ufz.org/"
Documentation = "https://mhm.pages.ufz.de/mhm-tools"
Source = "https://git.ufz.de/mhm/mhm-tools"
Tracker = "https://git.ufz.de/mhm/mhm-tools/-/issues"
Changelog = "https://git.ufz.de/mhm/mhm/-/blob/main/CHANGELOG.md"

[project.optional-dependencies]
doc = [
  "sphinx>=5",
  "pydata-sphinx-theme==0.11",
  "numpydoc>=1.1",
  "sphinx-design>=0.3",
  "myst-parser>=0.18",
  "sphinxcontrib-mermaid>=0.7",
  "ablog>=0.10",
  "docutils>=0.18", # mdinclude with myst
  "sphinx-argparse>=0.4.0", # CLI doc
]
test = ["pytest-cov>=3"]
check = [
  "black>=23,<24",
  "isort[colors]<6",
  "ruff==0.0.239",
  "pydocstyle",
]

[project.scripts]
mhm-tools = "mhm_tools._cli:main"

[tool.hatch.version]
source = "vcs"
fallback_version = "0.0.0.dev0"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "src/mhm_tools/_version.py"
template = "__version__ = '{version}'"

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mhm_tools"]

[tool.black]
exclude = "_version.py"
target-version = ["py38"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pydocstyle]
convention = "numpy"

[tool.coverage]
[tool.coverage.run]
source = ["mhm_tools"]
omit = [
  "*docs*",
  "*examples*",
  "*tests*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",  "B904",  # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "E501",    # line to long (black decides)
]
